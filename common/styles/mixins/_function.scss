@use 'sass:math';
@use 'sass:meta'; // sass:meta 모듈 추가
@use 'sass:map'; // sass:map 모듈 추가

/* --------------------- Setting --------------------- */
@function decimal-round($point) {
  @return math.div(math.round($point * 10000), 10000);
}

@function check-var($value) {
  @if (meta.type-of($value) == 'number') {
    // type-of를 meta.type-of로 변경
    @return $value;
  } @else {
    @return var($value);
  }
}

/* --------------------- 말줄임 --------------------- */
@mixin ellipsis($line: 1) {
  @if ($line==1) {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  } @else {
    display: -webkit-box;
    overflow: hidden;
    text-overflow: ellipsis;
    word-wrap: break-word; // 공백 없을때 글자 짤림 방지
    -webkit-box-orient: vertical;
    -webkit-line-clamp: $line;
  }
}

/* --------------------- 반응형 --------------------- */
$media-queries: (
  fhd: 1920px,
  pc: 1440px,
  ta: 1280px,
  mo: 768px,
  mo-ex: 480px,
);

@mixin mq($breakpoint) {
  @if $breakpoint == fhd {
    @container wrapper (min-width: #{map.get($media-queries, fhd)}) {
      @content;
    }
  } @else if $breakpoint == pc {
    @container wrapper (max-width: #{map.get($media-queries, pc)}) {
      @content;
    }
  } @else if $breakpoint == ta {
    @container wrapper (max-width: #{map.get($media-queries, ta)}) {
      @content;
    }
  } @else if $breakpoint == mo {
    @container wrapper (max-width: #{map.get($media-queries, mo)}) {
      @content;
    }
  } @else if $breakpoint == mo-ex {
    @container wrapper (max-width: #{map.get($media-queries, mo-ex)}) {
      @content;
    }
  }
}

/* --------------------- 클램프 --------------------- */
@function clamp-cqi($min, $max, $container-width) {
  @if $min < 0 {
    @return #{calc(check-var($max) / check-var($container-width) * 100cqi)};
  } @else {
    @return clamp(
      #{calc(check-var($min) * 1px)},
      #{calc(check-var($max) / check-var($container-width) * 100cqi)},
      #{calc(check-var($max) * 1px)}
    );
  }
}

@function cqi($value, $min: null) {
  @if ($min != null) {
    @return clamp-cqi($min, $value, --cont-w);
  } @else {
    @if (meta.type-of($value) == 'number') {
      // type-of를 meta.type-of로 변경
      @if ($value < 0) {
        @return clamp-cqi($value, $value, --cont-w);
      }
      @return clamp-cqi(1, $value, --cont-w);
    }
    @return clamp-cqi(1, $value, --cont-w);
  }
}

@mixin font-cqi($font, $line: null, $ls: null, $min: null, $weight: null, $color: null) {
  @if ($min != null) {
    font-size: clamp-cqi($min, $font, --cont-w);
  } @else {
    font-size: clamp-cqi(11, $font, --cont-w);
  }

  @if ($weight != null) {
    font-weight: check-var($weight);
  }

  @if ($ls != null) {
    letter-spacing: calc($ls * 1em);
  }

  @if ($line != null) {
    line-height: calc(check-var($line) / check-var($font));
  }

  @if ($color != null) {
    color: $color;
  }
}

/* --------------------- vw 값을 기준으로 반응형 크기 계산 함수 --------------------- */
// vw 값을 기준으로 반응형 크기 계산 함수
// vw($value): 1920px 기준의 vw 값으로, 최솟값은 $value px로 보장
@function vw($value) {
  @return max(#{calc(check-var($value) * 1px)}, #{calc(check-var($value) / var(--cont-w) * 100vw)});
}

@mixin font-vw($font, $line: null, $ls: null, $min: null, $weight: null, $color: null) {
  @if ($min != null) {
    font-size: max(
      #{calc(check-var($min) * 1px)},
      #{calc(check-var($font) / var(--cont-w) * 100vw)}
    );
  } @else {
    font-size: vw($font);
  }

  @if ($weight != null) {
    font-weight: check-var($weight);
  }

  @if ($ls != null) {
    letter-spacing: calc($ls * 1em);
  }

  @if ($line != null) {
    line-height: calc(check-var($line) / check-var($font));
  }

  @if ($color != null) {
    color: $color;
  }
}
